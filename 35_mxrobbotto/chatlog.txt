# Jacob Lukose, Ethan Sie
# DigitalSie
# SoftDev
# K35: mxrobbotto
# 2025-03-17
# time spent: 2 hours
----------------------- PROMPT 1 --------------------------------
P00: Half-Quick Move Slowly and Fix Things
Due: 2024-11-07r 08:00EST

Imagine:

_Your team advertises proficiency with Flask, Python, and SQLite. Your team has been contracted to design and implement a newfangled webapp called a "wiki."_

Imagine one of these scenarios:

Scenario One: Your team has been contracted to create a collaborative storytelling game/website, with the following features:

    Users will have to register to use the site.
    Logged-in users can either start a new story or add to an existing story.
    When adding to a story,
        Users are shown only the latest update to the story, not the whole thing.
        A user can then add some amount of text to the story.
    Once a user has added to a story, they cannot add to it again.
    When creating a new story,
        Users get to start with any amount of text and give the story a title.
        Logged in users will be able to read any story they have contributed to on their homepage (the landing page after login).

Scenario Two: Your team has been contracted to create a web log hosting site, with the following features:

    Users will have to register to use the site.
    A logged-in user will be able to
        Create a new blog
        Update their blog by adding a new entry
        View and edit their own past entries
        View the blogs of other users

Your "software solution," to use the parlance of our times, will incorporate a few distinct components, so it is imperative that your team develop a design before taking any further steps.

Your team's first order of business is reaching agreement as to how your project will be organized and how you will divide work. It will be imperative that each teammate a) shares the same organizational model of your target, and b)
understands how they and their work will fit into it.

Enter the design document. Design by next class session.

(Nota bene: This is your only deliverable for next class. All your efforts should be directed to doing this job well.)
Design Document Specifications:

    A list of program components with role of each specified. (e.g., a car engine is comprised of various components: carburetor, alternator, radiator, spark plugs, etc. Each must perform its role for the engine to do its overall job.)
    Explanation of how each component relates to the others.
        Component map visualizing relationships between components.
    Database Organization (tables? Relationships b/t tables? etc.)
    Site map for front end
        Represent each page you envision for your site.
        Show linkages conveying all possilbe pathways for a user traversing site.
    A breakdown of the different tasks required to complete this project
        Include assignments of each task to each group member
    Append this line to your heading: TARGET SHIP DATE: {yyyy-mm-dd}
    Amalgamate these components into a single PDF, store in designated location.

Project Guidelines:

    Flask will serve as your web server/delivery framework.
    SQLite3 will serve as your backend data storage system.
        As you grown your "sql-fu", always start with Devo Knowledge Base (QAF, n&c) and primary documentation. (...and if none of these have the answer you seek, and you find a SO post that is actually useful, or any other diamond in the rough of the Intertrash, add it to Devo KB)
        Get creative, think boldly, get your hands dirty as you experiment via the sqlite3 shell and see what works/sticks...
    Multiple Python files should be used, as necessary, for application layer. (a.k.a. "middleware" modules, etc.)
    CSS: You may provide your own IFF...
        your site is fully functional with CSS is stripped away.
        you store it in the appropriate location for flask to use it.
        it is all written by you
    Use Q&A forum liberally. "A rising tide lifts all boats."
    Reminder: include heading as comment in all source files.
    Platinum Rule: THOUST APP SHALT NOT FAIL.

Your website will incorporate a few distinct components, so it is imperative that your team develop a design and agree upon roles before you move to implementation.

You will need a DEVLOG for this project.

    Devlog allows any group member at any time to see the current state of the project.
    PM will make sure devlog is being maintained, but will not make all entries.
    The devlog should be a plain text file, stored in the specified location.
    When any team member stops working and pushes changes to github, they should update the devlog explaining what changes have been made. Include errors/bugs discovered (or created).
    Separate devlog entries with a newline.
    Most recent entry at the bottom.
    Each entry should begin with the following format: firstL -- TIMESTAMP\n ( e.g.: topherM -- 1999-12-31 23:59 )

FINAL DELIVERABLES (watch this section for updates):

    hardcopy:
        final version of design doc (x1)
        staple because it indicates "you have it together"
    repo structure:

app/
    __init__.py
    static/
        css/          ( O P T I O N A L )
    templates/
design.pdf
devlog.txt
flag.jpg
README.md
requirements.txt

    README.md
        Clearly visible at top: <Project Name> by <Team Name>
        Roster with roles
        Description of website/app (a la abstract of a scientific paper... NOT your entire design doc!)
        Install guide:
            How to clone/install.
        Launch codes:
            How to run.
    design.pdf
        Latest/current version of your design document.
        Revisions since v0 noted/explained in devlog.
    requirements.txt
        It will list flask as well as any other pip installs your app requires.
        Latest version of all packages.
        Clearance must be sought and granted for any modules/libraries not explicitly covered in class.

Subgoals / Checkpoint Deliverables:

    R 2024-10-24 08:00
        submodule linked
        team registered
        deposit hardcopy of design doc (3x) on lisadesk at beginning of pd
        writing utensils of multiple non-blue/black hues
    F 2024-10-25 08:00
        revised design document
        summary of design doc changes in devlog
        deposit hardcopy of design doc (1x) on lisadesk at beginning of pd
        readme heading
    W 2024-10-30 08:00
        digital team flag in place
        devlog up-to-date
        functional app in place
        "Install Guide" section of readme filled in
        "Launch Codes" section of readme filled in
    R 2024-10-31 08:00
        devlog up-to-date
        devlog entry summarizing external readme review
    M 2024-11-04 08:00
        devlog up-to-date
        python module dependencies file in place, with correct package list
        description of project in main readme
\

----------------------- RESPONSE 1 --------------------------------
To accomplish the goals outlined in the project description, the team will need to produce a detailed design document. Below is a structured approach to creating this document, along with the necessary components and their roles.
This document provides a comprehensive overview that includes the roles of each component, their relationships, database schema, site map, and task assignments. Each section should be expanded and detailed as needed by the team before finalizing the design document.
-------------------------------------------------------

----------------------- PROMPT 2 --------------------------------
Can you code all the files needed to create this file with the given file structure:
path/to/your/workshop$ tree k35
app/
    __init__.py
    static/
        css/          ( O P T I O N A L )
    templates/
chatlog.txt
log.txt
flag.jpg
README.md
requirements.txt
----------------------- RESPONSE 2 --------------------------------
It looks like the files do not exist in the specified repository. I will create the necessary files for you.
We have now created the necessary files as specified in the file structure. You can further develop each module and add additional logic as needed.
-------------------------------------------------------

----------------------- PROMPT 3 --------------------------------
Put all the flask code in one __init__.py file
-------------------------------------------------------

----------------------- PROMPT 4 --------------------------------
Can you add code so that when we python3 __init__.py, it runs the flask server on a local host?
-------------------------------------------------------

----------------------- PROMPT 5 --------------------------------
We want to see our stories on the index.html page after we create them. After we create the stories through create_story.html, they are not stored and passed  back into index.html through the flask routing. We also aren't able to access update_story.html. Add a button that allows us to update stories as well from the index.html page.
----------------------- RESPONSE 5 --------------------------------
To achieve this, we need to implement the following changes:
Implement the database setup to store the stories.
Update the route handlers to interact with the database.
Modify the templates to display and update stories.
Here are the updated files:
With these changes:

The database is initialized to store stories.
The index route fetches stories from the database and displays them on the homepage.
The create_story route allows for the creation of new stories, which are then stored in the database.
The update_story route retrieves the story content for updating and saves changes to the database.
Ensure the database.db file is created in the same directory as your __init__.py file. You can now run the Flask server with python3 app/__init__.py and see your stories on the homepage.
-------------------------------------------------------

----------------------- PROMPT 6 --------------------------------
Let me iterate. Adjust this current system to allow for the following user actions:
    Users will have to register to use the site.
    Logged-in users can either start a new story or add to an existing story.
    When adding to a story,
        Users are shown only the latest update to the story, not the whole thing.
        A user can then add some amount of text to the story.
    Once a user has added to a story, they cannot add to it again.
    When creating a new story,
        Users get to start with any amount of text and give the story a title.
        Logged in users will be able to read any story they have contributed to on their homepage (the landing page after login).
----------------------- RESPONSE 6 --------------------------------
To implement the described functionality, we need to make several adjustments and additions to the current system:

User Registration and Login: Implement user authentication to ensure users are registered and logged in.
Story Creation and Updates: Adjust the logic to ensure users can only add to a story once and can view their contributions.
Database Adjustments: Modify the database schema to include users and their contributions.
User-Specific Homepage: Display stories that the user has contributed to on their homepage.
Here are the updated files to implement the required functionality:
With these changes:

User Registration and Login: Users can register, log in, and log out.
Story Management: Users can create new stories and add to existing stories only once.
User-Specific Homepage: Logged-in users can see the stories they have contributed to on their homepage.
You can now run the Flask server with python3 app/__init__.py and test the functionalities.
-------------------------------------------------------


----------------------- PROMPT 7 --------------------------------
It autoredirects me to login even though I need to register an account before I can actually log in.
----------------------- RESPONSE 7 --------------------------------
The issue arises because the index route checks if the user is logged in and redirects to the login page if not. We need to add a route for the registration page that is accessible without requiring the user to be logged in.
Here are the adjusted files to fix this issue:
By adding the registration link to the login page and ensuring the registration route doesn't require a logged-in user, the user can now register before logging in.
-------------------------------------------------------


----------------------- PROMPT 8 --------------------------------
IntegrityError
sqlite3.IntegrityError: NOT NULL constraint failed: stories.content
----------------------- RESPONSE 8 --------------------------------
It looks like there is an issue with the database schema where the content field is missing in the stories table. We need to ensure that the content field is present and not null.
Here is the updated __init__.py file to fix the database schema:
This update includes the content field in the stories table schema, ensuring that it is not null. You can now run the Flask server with python3 app/__init__.py and test the functionality.
-------------------------------------------------------


----------------------- PROMPT 9 --------------------------------
IntegrityError
sqlite3.IntegrityError: UNIQUE constraint failed: users.username
----------------------- RESPONSE 9 --------------------------------
The error indicates that the username you are trying to register already exists in the database. To handle this, we should add a check during the registration process to ensure the username is unique and provide appropriate feedback to the user if the username already exists.
Here is the updated __init__.py file with the necessary changes:
With this update:

The registration route now checks if the username already exists in the database.
If the username exists, it flashes a message to the user and prevents the registration.
Otherwise, it proceeds with the registration process and stores the new user in the database.
You can now run the Flask server with python3 app/__init__.py and test the registration functionality.
-------------------------------------------------------

----------------------- PROMPT 10 --------------------------------
When adding to a story,
Users are shown only the latest update to the story, not the whole thing.
A user can then add some amount of text to the story.
----------------------- RESPONSE 10 --------------------------------
To show users only the latest update to the story and allow them to add some text to the story, we need to make changes to the update_story route and template. Below are the changes:
With these changes:
The update_story route fetches only the latest update to the story and displays it in the template.
Users can add their text to the story and submit it.
The template displays the latest update and provides a form for users to add their contribution.
You can now run the Flask server with python3 app/__init__.py and test the functionality.
-------------------------------------------------------


----------------------- PROMPT 11 --------------------------------
Address already in use
Port 5000 is in use by another program. Either identify and stop that program, or start the server with a different port.
On macOS, try disabling the 'AirPlay Receiver' service from System Preferences -> General -> AirDrop & Handoff.
----------------------- RESPONSE 11 --------------------------------
You can run the Flask server on a different port by specifying a different port number in the app.run() method. For example, you can change the port to 5001 or any other available port.
Here is the updated __init__.py file with the port changed to 5001:
In this update, the Flask application will now run on port 5001. You can change the port number to any other available port if needed. Run the Flask server with python3 app/__init__.py to start it on the new port.
-------------------------------------------------------


----------------------- PROMPT 12 --------------------------------
Other users should be able to access the stories that another user creates. This should still adhere to the rule regarding updating and viewing stories. Also, users aren't able to view (they should be able to).
----------------------- RESPONSE 12 --------------------------------
To ensure that other users can access the stories created by another user while adhering to the rules regarding updating and viewing stories, we need to make the following changes:
Update the homepage to display all stories while indicating if the user has contributed to them.
Modify the story update page to show only the latest update and allow users to contribute if they haven't already.
Here is the updated __init__.py file:
With these changes:
Homepage: Displays all stories and indicates if the user has contributed to them. Users can view or update stories accordingly.
Update Story Page: Shows only the latest update and allows users to contribute if they haven't already.
View Story Page: Allows users to view the entire content of a story.
You can now run the Flask server with python3 app/__init__.py and test the functionality.
-------------------------------------------------------


----------------------- PROMPT 13 --------------------------------
Now can you restrict users from viewing unless they have contributed to the story? However, this should not restrict them from updating unless they already did
----------------------- RESPONSE 13 --------------------------------
To restrict users from viewing a story unless they have contributed to it, we need to add a check in the view_story route. If a user has not contributed to a story, they should be redirected back to the homepage with an appropriate message. However, users should still be able to update a story unless they have already contributed.
Here are the updated files:
With these changes:
Homepage: Still displays all stories but users can only view stories they have contributed to.
View Story Page: Users can only view stories they have contributed to. If they haven't contributed, they are redirected back to the homepage with an appropriate message.
You can now run the Flask server with python3 app/__init__.py and test the functionality.
-------------------------------------------------------


----------------------- PROMPT 14 --------------------------------
perfect, now can you make this look super nice? Don't change any of the functionality, I just want an aesthetic website.
----------------------- RESPONSE 14 --------------------------------
To improve the aesthetics of the website, we can add some CSS for styling and make use of a CSS framework like Bootstrap to quickly enhance the look and feel. Here are the updated files to make the website look more appealing:
Updated __init__.py
This file does not need any changes for styling purposes.
With these changes, the website will now have a more polished and aesthetic look using Bootstrap for styling. You can run the Flask server with python3 app/__init__.py and see the improved design.
-------------------------------------------------------
